// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"tiny-url/internal/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function for the type MockAuthService
func (_mock *MockAuthService) GetUser(ctx context.Context, id uint) (*model.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) (*model.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) *model.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockAuthService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockAuthService_Expecter) GetUser(ctx interface{}, id interface{}) *MockAuthService_GetUser_Call {
	return &MockAuthService_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockAuthService_GetUser_Call) Run(run func(ctx context.Context, id uint)) *MockAuthService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockAuthService_GetUser_Call) Return(user *model.User, err error) *MockAuthService_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockAuthService_GetUser_Call) RunAndReturn(run func(ctx context.Context, id uint) (*model.User, error)) *MockAuthService_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Login(username string, password string) (string, error) {
	ret := _mock.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(username, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(username, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(username, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - username
//   - password
func (_e *MockAuthService_Expecter) Login(username interface{}, password interface{}) *MockAuthService_Login_Call {
	return &MockAuthService_Login_Call{Call: _e.mock.On("Login", username, password)}
}

func (_c *MockAuthService_Login_Call) Run(run func(username string, password string)) *MockAuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_Login_Call) Return(s string, err error) *MockAuthService_Login_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAuthService_Login_Call) RunAndReturn(run func(username string, password string) (string, error)) *MockAuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Register(ctx context.Context, username string, email string, password string) (*model.User, string, error) {
	ret := _mock.Called(ctx, username, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *model.User
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (*model.User, string, error)); ok {
		return returnFunc(ctx, username, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) *model.User); ok {
		r0 = returnFunc(ctx, username, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) string); ok {
		r1 = returnFunc(ctx, username, email, password)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = returnFunc(ctx, username, email, password)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockAuthService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockAuthService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx
//   - username
//   - email
//   - password
func (_e *MockAuthService_Expecter) Register(ctx interface{}, username interface{}, email interface{}, password interface{}) *MockAuthService_Register_Call {
	return &MockAuthService_Register_Call{Call: _e.mock.On("Register", ctx, username, email, password)}
}

func (_c *MockAuthService_Register_Call) Run(run func(ctx context.Context, username string, email string, password string)) *MockAuthService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockAuthService_Register_Call) Return(user *model.User, s string, err error) *MockAuthService_Register_Call {
	_c.Call.Return(user, s, err)
	return _c
}

func (_c *MockAuthService_Register_Call) RunAndReturn(run func(ctx context.Context, username string, email string, password string) (*model.User, string, error)) *MockAuthService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function for the type MockAuthService
func (_mock *MockAuthService) ValidateToken(token string) (uint, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 uint
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (uint, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) uint); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(uint)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockAuthService_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - token
func (_e *MockAuthService_Expecter) ValidateToken(token interface{}) *MockAuthService_ValidateToken_Call {
	return &MockAuthService_ValidateToken_Call{Call: _e.mock.On("ValidateToken", token)}
}

func (_c *MockAuthService_ValidateToken_Call) Run(run func(token string)) *MockAuthService_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthService_ValidateToken_Call) Return(v uint, err error) *MockAuthService_ValidateToken_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockAuthService_ValidateToken_Call) RunAndReturn(run func(token string) (uint, error)) *MockAuthService_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}
