// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"tiny-url/internal/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockURLService creates a new instance of MockURLService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockURLService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockURLService {
	mock := &MockURLService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockURLService is an autogenerated mock type for the URLService type
type MockURLService struct {
	mock.Mock
}

type MockURLService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockURLService) EXPECT() *MockURLService_Expecter {
	return &MockURLService_Expecter{mock: &_m.Mock}
}

// DeleteURL provides a mock function for the type MockURLService
func (_mock *MockURLService) DeleteURL(ctx context.Context, shortCode string) error {
	ret := _mock.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for DeleteURL")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, shortCode)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockURLService_DeleteURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteURL'
type MockURLService_DeleteURL_Call struct {
	*mock.Call
}

// DeleteURL is a helper method to define mock.On call
//   - ctx
//   - shortCode
func (_e *MockURLService_Expecter) DeleteURL(ctx interface{}, shortCode interface{}) *MockURLService_DeleteURL_Call {
	return &MockURLService_DeleteURL_Call{Call: _e.mock.On("DeleteURL", ctx, shortCode)}
}

func (_c *MockURLService_DeleteURL_Call) Run(run func(ctx context.Context, shortCode string)) *MockURLService_DeleteURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockURLService_DeleteURL_Call) Return(err error) *MockURLService_DeleteURL_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockURLService_DeleteURL_Call) RunAndReturn(run func(ctx context.Context, shortCode string) error) *MockURLService_DeleteURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetURL provides a mock function for the type MockURLService
func (_mock *MockURLService) GetURL(ctx context.Context, shortCode string) (*model.URL, error) {
	ret := _mock.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 *model.URL
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.URL, error)); ok {
		return returnFunc(ctx, shortCode)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.URL); ok {
		r0 = returnFunc(ctx, shortCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.URL)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, shortCode)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockURLService_GetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURL'
type MockURLService_GetURL_Call struct {
	*mock.Call
}

// GetURL is a helper method to define mock.On call
//   - ctx
//   - shortCode
func (_e *MockURLService_Expecter) GetURL(ctx interface{}, shortCode interface{}) *MockURLService_GetURL_Call {
	return &MockURLService_GetURL_Call{Call: _e.mock.On("GetURL", ctx, shortCode)}
}

func (_c *MockURLService_GetURL_Call) Run(run func(ctx context.Context, shortCode string)) *MockURLService_GetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockURLService_GetURL_Call) Return(uRL *model.URL, err error) *MockURLService_GetURL_Call {
	_c.Call.Return(uRL, err)
	return _c
}

func (_c *MockURLService_GetURL_Call) RunAndReturn(run func(ctx context.Context, shortCode string) (*model.URL, error)) *MockURLService_GetURL_Call {
	_c.Call.Return(run)
	return _c
}

// ListURLs provides a mock function for the type MockURLService
func (_mock *MockURLService) ListURLs(ctx context.Context, limit int, offset int) ([]*model.URL, error) {
	ret := _mock.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListURLs")
	}

	var r0 []*model.URL
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*model.URL, error)); ok {
		return returnFunc(ctx, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*model.URL); ok {
		r0 = returnFunc(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.URL)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockURLService_ListURLs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListURLs'
type MockURLService_ListURLs_Call struct {
	*mock.Call
}

// ListURLs is a helper method to define mock.On call
//   - ctx
//   - limit
//   - offset
func (_e *MockURLService_Expecter) ListURLs(ctx interface{}, limit interface{}, offset interface{}) *MockURLService_ListURLs_Call {
	return &MockURLService_ListURLs_Call{Call: _e.mock.On("ListURLs", ctx, limit, offset)}
}

func (_c *MockURLService_ListURLs_Call) Run(run func(ctx context.Context, limit int, offset int)) *MockURLService_ListURLs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockURLService_ListURLs_Call) Return(uRLs []*model.URL, err error) *MockURLService_ListURLs_Call {
	_c.Call.Return(uRLs, err)
	return _c
}

func (_c *MockURLService_ListURLs_Call) RunAndReturn(run func(ctx context.Context, limit int, offset int) ([]*model.URL, error)) *MockURLService_ListURLs_Call {
	_c.Call.Return(run)
	return _c
}

// RedirectURL provides a mock function for the type MockURLService
func (_mock *MockURLService) RedirectURL(ctx context.Context, shortCode string) (string, error) {
	ret := _mock.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for RedirectURL")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, shortCode)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, shortCode)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, shortCode)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockURLService_RedirectURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RedirectURL'
type MockURLService_RedirectURL_Call struct {
	*mock.Call
}

// RedirectURL is a helper method to define mock.On call
//   - ctx
//   - shortCode
func (_e *MockURLService_Expecter) RedirectURL(ctx interface{}, shortCode interface{}) *MockURLService_RedirectURL_Call {
	return &MockURLService_RedirectURL_Call{Call: _e.mock.On("RedirectURL", ctx, shortCode)}
}

func (_c *MockURLService_RedirectURL_Call) Run(run func(ctx context.Context, shortCode string)) *MockURLService_RedirectURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockURLService_RedirectURL_Call) Return(s string, err error) *MockURLService_RedirectURL_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockURLService_RedirectURL_Call) RunAndReturn(run func(ctx context.Context, shortCode string) (string, error)) *MockURLService_RedirectURL_Call {
	_c.Call.Return(run)
	return _c
}

// ShortenURL provides a mock function for the type MockURLService
func (_mock *MockURLService) ShortenURL(ctx context.Context, originalURL string) (*model.URL, error) {
	ret := _mock.Called(ctx, originalURL)

	if len(ret) == 0 {
		panic("no return value specified for ShortenURL")
	}

	var r0 *model.URL
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.URL, error)); ok {
		return returnFunc(ctx, originalURL)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.URL); ok {
		r0 = returnFunc(ctx, originalURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.URL)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, originalURL)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockURLService_ShortenURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShortenURL'
type MockURLService_ShortenURL_Call struct {
	*mock.Call
}

// ShortenURL is a helper method to define mock.On call
//   - ctx
//   - originalURL
func (_e *MockURLService_Expecter) ShortenURL(ctx interface{}, originalURL interface{}) *MockURLService_ShortenURL_Call {
	return &MockURLService_ShortenURL_Call{Call: _e.mock.On("ShortenURL", ctx, originalURL)}
}

func (_c *MockURLService_ShortenURL_Call) Run(run func(ctx context.Context, originalURL string)) *MockURLService_ShortenURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockURLService_ShortenURL_Call) Return(uRL *model.URL, err error) *MockURLService_ShortenURL_Call {
	_c.Call.Return(uRL, err)
	return _c
}

func (_c *MockURLService_ShortenURL_Call) RunAndReturn(run func(ctx context.Context, originalURL string) (*model.URL, error)) *MockURLService_ShortenURL_Call {
	_c.Call.Return(run)
	return _c
}
