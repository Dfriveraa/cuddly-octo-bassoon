// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"tiny-url/internal/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockURLRepository creates a new instance of MockURLRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockURLRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockURLRepository {
	mock := &MockURLRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockURLRepository is an autogenerated mock type for the URLRepository type
type MockURLRepository struct {
	mock.Mock
}

type MockURLRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockURLRepository) EXPECT() *MockURLRepository_Expecter {
	return &MockURLRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockURLRepository
func (_mock *MockURLRepository) Create(ctx context.Context, url *model.URL) error {
	ret := _mock.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.URL) error); ok {
		r0 = returnFunc(ctx, url)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockURLRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockURLRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - url
func (_e *MockURLRepository_Expecter) Create(ctx interface{}, url interface{}) *MockURLRepository_Create_Call {
	return &MockURLRepository_Create_Call{Call: _e.mock.On("Create", ctx, url)}
}

func (_c *MockURLRepository_Create_Call) Run(run func(ctx context.Context, url *model.URL)) *MockURLRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.URL))
	})
	return _c
}

func (_c *MockURLRepository_Create_Call) Return(err error) *MockURLRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockURLRepository_Create_Call) RunAndReturn(run func(ctx context.Context, url *model.URL) error) *MockURLRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockURLRepository
func (_mock *MockURLRepository) Delete(ctx context.Context, shortCode string) error {
	ret := _mock.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, shortCode)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockURLRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockURLRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - shortCode
func (_e *MockURLRepository_Expecter) Delete(ctx interface{}, shortCode interface{}) *MockURLRepository_Delete_Call {
	return &MockURLRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, shortCode)}
}

func (_c *MockURLRepository_Delete_Call) Run(run func(ctx context.Context, shortCode string)) *MockURLRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockURLRepository_Delete_Call) Return(err error) *MockURLRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockURLRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, shortCode string) error) *MockURLRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByOriginalURL provides a mock function for the type MockURLRepository
func (_mock *MockURLRepository) GetByOriginalURL(ctx context.Context, originalURL string) (*model.URL, error) {
	ret := _mock.Called(ctx, originalURL)

	if len(ret) == 0 {
		panic("no return value specified for GetByOriginalURL")
	}

	var r0 *model.URL
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.URL, error)); ok {
		return returnFunc(ctx, originalURL)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.URL); ok {
		r0 = returnFunc(ctx, originalURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.URL)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, originalURL)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockURLRepository_GetByOriginalURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByOriginalURL'
type MockURLRepository_GetByOriginalURL_Call struct {
	*mock.Call
}

// GetByOriginalURL is a helper method to define mock.On call
//   - ctx
//   - originalURL
func (_e *MockURLRepository_Expecter) GetByOriginalURL(ctx interface{}, originalURL interface{}) *MockURLRepository_GetByOriginalURL_Call {
	return &MockURLRepository_GetByOriginalURL_Call{Call: _e.mock.On("GetByOriginalURL", ctx, originalURL)}
}

func (_c *MockURLRepository_GetByOriginalURL_Call) Run(run func(ctx context.Context, originalURL string)) *MockURLRepository_GetByOriginalURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockURLRepository_GetByOriginalURL_Call) Return(uRL *model.URL, err error) *MockURLRepository_GetByOriginalURL_Call {
	_c.Call.Return(uRL, err)
	return _c
}

func (_c *MockURLRepository_GetByOriginalURL_Call) RunAndReturn(run func(ctx context.Context, originalURL string) (*model.URL, error)) *MockURLRepository_GetByOriginalURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetByShortCode provides a mock function for the type MockURLRepository
func (_mock *MockURLRepository) GetByShortCode(ctx context.Context, shortCode string) (*model.URL, error) {
	ret := _mock.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for GetByShortCode")
	}

	var r0 *model.URL
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.URL, error)); ok {
		return returnFunc(ctx, shortCode)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.URL); ok {
		r0 = returnFunc(ctx, shortCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.URL)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, shortCode)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockURLRepository_GetByShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByShortCode'
type MockURLRepository_GetByShortCode_Call struct {
	*mock.Call
}

// GetByShortCode is a helper method to define mock.On call
//   - ctx
//   - shortCode
func (_e *MockURLRepository_Expecter) GetByShortCode(ctx interface{}, shortCode interface{}) *MockURLRepository_GetByShortCode_Call {
	return &MockURLRepository_GetByShortCode_Call{Call: _e.mock.On("GetByShortCode", ctx, shortCode)}
}

func (_c *MockURLRepository_GetByShortCode_Call) Run(run func(ctx context.Context, shortCode string)) *MockURLRepository_GetByShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockURLRepository_GetByShortCode_Call) Return(uRL *model.URL, err error) *MockURLRepository_GetByShortCode_Call {
	_c.Call.Return(uRL, err)
	return _c
}

func (_c *MockURLRepository_GetByShortCode_Call) RunAndReturn(run func(ctx context.Context, shortCode string) (*model.URL, error)) *MockURLRepository_GetByShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementVisits provides a mock function for the type MockURLRepository
func (_mock *MockURLRepository) IncrementVisits(ctx context.Context, shortCode string) error {
	ret := _mock.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for IncrementVisits")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, shortCode)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockURLRepository_IncrementVisits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementVisits'
type MockURLRepository_IncrementVisits_Call struct {
	*mock.Call
}

// IncrementVisits is a helper method to define mock.On call
//   - ctx
//   - shortCode
func (_e *MockURLRepository_Expecter) IncrementVisits(ctx interface{}, shortCode interface{}) *MockURLRepository_IncrementVisits_Call {
	return &MockURLRepository_IncrementVisits_Call{Call: _e.mock.On("IncrementVisits", ctx, shortCode)}
}

func (_c *MockURLRepository_IncrementVisits_Call) Run(run func(ctx context.Context, shortCode string)) *MockURLRepository_IncrementVisits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockURLRepository_IncrementVisits_Call) Return(err error) *MockURLRepository_IncrementVisits_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockURLRepository_IncrementVisits_Call) RunAndReturn(run func(ctx context.Context, shortCode string) error) *MockURLRepository_IncrementVisits_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockURLRepository
func (_mock *MockURLRepository) List(ctx context.Context, limit int, offset int) ([]*model.URL, error) {
	ret := _mock.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*model.URL
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*model.URL, error)); ok {
		return returnFunc(ctx, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*model.URL); ok {
		r0 = returnFunc(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.URL)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockURLRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockURLRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx
//   - limit
//   - offset
func (_e *MockURLRepository_Expecter) List(ctx interface{}, limit interface{}, offset interface{}) *MockURLRepository_List_Call {
	return &MockURLRepository_List_Call{Call: _e.mock.On("List", ctx, limit, offset)}
}

func (_c *MockURLRepository_List_Call) Run(run func(ctx context.Context, limit int, offset int)) *MockURLRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockURLRepository_List_Call) Return(uRLs []*model.URL, err error) *MockURLRepository_List_Call {
	_c.Call.Return(uRLs, err)
	return _c
}

func (_c *MockURLRepository_List_Call) RunAndReturn(run func(ctx context.Context, limit int, offset int) ([]*model.URL, error)) *MockURLRepository_List_Call {
	_c.Call.Return(run)
	return _c
}
